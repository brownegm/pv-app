library(shiny)
library(shinythemes)
library(shiny)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(segmented)
library(DT)


not_sel <- "Not Selected"

ui<-(
        fluidPage(
     sidebarLayout(
            sidebarPanel(
              fileInput('file', 'Choose CSV File',
                        accept = c('.csv','.tsv') ),
              uiOutput('date'),
              uiOutput('sp'),
               uiOutput('rep'),

              h4("full weter weight"),
              textOutput("ww"),
              h4("Your Current Data"), 
              verbatimTextOutput("brush_info"),
              tableOutput("values"),
              h4("Laef P-V Parameters"), 
              tableOutput("final_results")
            ),
            
            
            mainPanel(
                    actionButton('DeleteSelectedData', 'Delete Incorect Data'), 
                    actionButton('ResetData', 'Reset Data'),
                    plotOutput("myPlot", click = "plot1_click", 
                               brush = brushOpts(id = "plot1_brush")),
                    plotOutput("myPlot2")
            )
     )
   )
)

library(shiny)
library(shinythemes)
library(shiny)
library(dplyr)
library(ggplot2)
library(segmented)
library(data.table)

not_sel <- "Not Selected"

pv<-read.csv("pv summer 2020.csv")

server <- function(input, output,session) {

  raw_data <- reactive({
    infile <- input$file
    if (is.null(infile)) {
      # User has not uploaded a file yet
      return(pv %>% 
               mutate(wp_mpa=wp/-10,wp_m=-1/wp_mpa,M=fresh_mass_g-extra_mass_g-dry_mass_g))
    }
    tbl = read.csv(infile$datapath, stringsAsFactors = FALSE) %>% 
      mutate(wp_mpa=wp/-10,wp_m=-1/wp_mpa,M=fresh_mass_g-extra_mass_g-dry_mass_g)
    v$df_sheet = tbl
    tbl
  })
  
  output$date <- renderUI({
    cyl <- raw_data()  %>% pull(date) %>% unique() 
    selectInput("date", "date:", choices = cyl)
  })
  output$sp <- renderUI({
    cyl <- raw_data()%>% filter( date ==  input$date) %>% pull(sp) %>% unique()
    selectInput("sp", "species:", choices = cyl)
  })
  output$rep <- renderUI({
    cyl <- raw_data()%>% filter( sp ==  input$sp, date ==  input$date) %>% pull(rep) %>% unique()
    selectInput("rep", "replicate:", choices = cyl)
  })
  
 data_analize <- reactive({raw_data() %>% 
   filter( rep ==  input$rep, sp ==  input$sp, date ==  input$date) 
 })
 
 v = reactiveValues(df_sheet = NULL)
 v_f = reactiveValues(df_sheet = NULL)
 
  output$myPlot <- renderPlot({
    
    v$df_sheet<-raw_data()
    v_f$df_sheet<-data_analize()
    
    my.lm <- lm(M~wp , data = v_f$df_sheet)
    my.seg <- segmented(my.lm, 
                        seg.Z = ~ wp)
    
    my.lines <- my.seg$psi[, 2]
    
    b0 <- coef(my.seg)[[1]]
    b1 <- coef(my.seg)[[2]]
    

    ggplot( v_f$df_sheet)+
      ggtitle("interactive plot - brush outlier and press 'delete'")+
      #geom_vline(xintercept = my.lines, linetype = "dashed",colour="red")+
      geom_point(size=3,aes(x=wp,y=M))+
      geom_abline(intercept = b0, slope = b1,linetype="dashed")+
      labs(x=expression(-Psi~~("Bar")),y="water wheight (g)",colour="")+
      theme_bw()+
      theme(text = element_text(size=20))
  })
  
  output$myPlot2 <- renderPlot({
    
    v$df_sheet<-raw_data()
    v_f$df_sheet<-data_analize()
    
        my.lm <- lm(M~wp , data = v_f$df_sheet)
    my.seg <- segmented(my.lm, 
                        seg.Z = ~ wp)
    
    TLP<-summary.segmented(my.seg)$psi [1,2] 
    break_point_est<--1/(TLP/-10)
    
    intercept2 <- coef(my.seg)[[1]]
    
    all_d<- brushedPoints(v_f$df_sheet, input$plot1_brush, allRows = TRUE)#[, c(input$sp, input$date)]
    
    pv_data<-all_d %>% mutate(rwc=round(M/intercept2*100,2))
    
    my.lm2 <- lm(rwc~wp_m , data = pv_data)
    my.seg2 <- segmented(my.lm2, 
                         seg.Z = ~ wp_m,
                         psi = break_point_est)
    
    my.lines <- my.seg2$psi[, 2]
    my.fitted2 <- fitted(my.seg2)
    my.model2 <- data.frame(wp_m_f = pv_data$wp_m, rwc_f= my.fitted2)
    pv_data<-cbind(pv_data,my.model2)
    
    lm_d<-subset(pv_data,wp_m<(summary.segmented(my.seg2)$psi [1,2]))
    osmo_mod<-lm(wp_m~rwc,data=lm_d)
    TLP<--1/(summary.segmented(my.seg2)$psi [1,2])
    TLP<-round(TLP,2)
    
    pv_data %>% 
      ggplot()+
      geom_point(aes(colour = "Data",y=wp_m,x=rwc),size=3)+
      geom_smooth(data=lm_d, aes(y=wp_m,x=rwc,colour = "lm Model"),method=lm, fullrange=TRUE,se=F,linetype="dashed",size=1.5)+
      scale_color_manual(values=c( "black", "darkgreen","tomato"))+
      ggtitle(label = paste("TLP:",TLP))+
      theme_bw()+
      labs(y=expression(atop(1/Psi~~("MPa"))),x="RWC",colour="")+
      #annotate(geom = 'text', label = paste("TLP:",TLP), x = -Inf, y = Inf, hjust = 1, vjust = 1,size=10)+
      theme(text = element_text(size=20), legend.position = c(0.85,0.85),
            plot.title = element_text(size=24,hjust = 0.5,face = "bold",margin = margin(t = 10, b = -40))
      )+
      geom_hline(yintercept =my.lines, linetype = "dashed",size=1.5,colour="red")+
      scale_x_reverse()
    
  })
  
  output$brush_info <- renderPrint({
    
    v$df_sheet<-raw_data()
    v_f$df_sheet<-data_analize()
    
    my.lm <- lm(M~wp , data = v_f$df_sheet)
    my.seg <- segmented(my.lm, 
                        seg.Z = ~ wp)
    
    b0 <- coef(my.seg)[[1]]
    
    all_d<- brushedPoints(v_f$df_sheet, input$plot1_brush, allRows = TRUE)#[, c(input$sp, input$date)]
    data<-all_d %>% mutate(rwc=round(M/b0*100,2)) 
    data[, c("obs","rwc","wp")]
  })
  
  output$final_results <- renderTable({
    
    v$df_sheet<-raw_data()
    v_f$df_sheet<-data_analize()
    
    my.lm <- lm(M~wp , data = v_f$df_sheet)
    my.seg <- segmented(my.lm,  seg.Z = ~ wp)
    
    b0 <- coef(my.seg)[[1]]
    
    all_d<- brushedPoints(v_f$df_sheet, input$plot1_brush, allRows = TRUE)#[, c(input$sp, input$date)]
    data<-all_d %>% mutate(rwc=round(M/b0*100,2)) 
    
    my.lm2 <- lm(rwc ~ wp_m, data = data)
    my.seg2 <- segmented(my.lm2, seg.Z = ~ wp_m)
    
    TLP<--1/(summary.segmented(my.seg2)$psi [1,2])
    
    lm_d<-subset(data,wp_m<(summary.segmented(my.seg2)$psi [1,2]))
    model_after_tlp <- lm(rwc ~ wp_m , data =lm_d )
    new.speeds <- data.frame(
      wp_m = summary.segmented(my.seg2)$psi [1,2]
    )
    
    rwc_tlp<-predict(model_after_tlp, newdata = new.speeds)
    rwc_tlp<-as.data.frame(rwc_tlp)[1,1]
    
    model_for_osm <- lm(wp_m ~ rwc , data =lm_d )
    
    new.rwc <- data.frame(
      rwc = 100)
    #100% osmolytes
    
    osm_full=-1/predict(model_for_osm, newdata = new.rwc)
    osm_full<-as.data.frame(osm_full)[1,1]
    
    #rwc_apoplast
    rwc_apoplast<-as.data.frame(coef(model_after_tlp))[1,1]
    
    Parameter<-c("TLP","RWC at TLP","Osm full","Apoplast f")
    Value<-c(TLP,rwc_tlp,osm_full,rwc_apoplast)
    output<-data.table(Parameter,Value)
    output
  })
  
  output$ww<-renderPrint({
    
    v$df_sheet<-raw_data()
    v_f$df_sheet<-data_analize()
    
    #dfreact<- brushedPoints(data_analize(), input$plot1_brush, allRows = TRUE)
    my.lm <- lm(M~wp , data = v_f$df_sheet)
    my.seg <- segmented(my.lm, 
                        seg.Z = ~ wp)
    # my.rsq<-summary(my.seg)$adj.r.squared
    my.slopes <- coef(my.seg)[1]
    my.slopes
    
  })
 
  observeEvent(input$DeleteSelectedData, {
    v$df_sheet<-raw_data()
    v_f$df_sheet<-data_analize()
    
    Var1 <- brushedPoints(v$df_sheet, input$plot1_brush, allRows = TRUE)
    v$df_sheet(Var1[!Var1$selected_, names(Var1) != "selected_", drop = FALSE])
  })
  
  observeEvent(input$ResetData, {
    v$df_sheet<-raw_data()
    v_f$df_sheet<-data_analize()
    
    v$df_sheet()
  })
}

shinyApp(ui1, server1)
